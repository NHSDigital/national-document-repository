name: 'PRE PROD UI - Deploy to Pre-Prod'

on:
  workflow_dispatch:
    inputs:
      branch_or_tag:
        description: "Which branch or tag do you want to deploy to pre-prod?"
        required: true
        type: string
        default: main

permissions:
  pull-requests: write
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  react_testing_job:
    name: Run UI Unit Tests
    uses: ./.github/workflows/base-jest-test.yml
    with:
      build_branch: main

  cypress_build_job:
    name: Build UI version for E2E Tests
    uses: ./.github/workflows/base-cypress-build.yml
    with:
      build_branch: main
  
  cypress_test_job:
    name: Run Cypress E2E Tests
    needs: [cypress_build_job]
    uses: ./.github/workflows/base-cypress-test-all-env.yml
    with:
      cypress_base_url: ${{ vars.CYPRESS_BASE_URL }}
      build_branch: main

  tag_and_release:
    needs: ["react_testing_job", "cypress_test_job"]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.tag || github.event.inputs.branch_or_tag }}
    permissions: write-all

    steps:
    - name: Checkout main
      if: ${{ github.event.inputs.branch_or_tag == 'main' }}
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: '0'

    - name: Bump version and push tag
      if: ${{ github.event.inputs.branch_or_tag == 'main' }}
      id: versioning
      uses: anothrNick/github-tag-action@1.64.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: false
        DEFAULT_BUMP: patch
    
    - name: View outputs
      run: |
        echo Deploying branch or tagged version to pre-prod UI: ${{ steps.versioning.outputs.tag || github.event.inputs.branch_or_tag }}

  deploy_ui:
    name: Deploy UI
    needs: ["tag_and_release"]
    uses: ./.github/workflows/base-deploy-ui.yml
    with:
      build_branch: ${{ needs.tag_and_release.outputs.version }}
      environment: pre-prod
      sandbox: pre-prod
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}
