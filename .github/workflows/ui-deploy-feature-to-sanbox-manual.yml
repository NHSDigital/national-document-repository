# .github/workflows/terraform-dev
name: 'UI - Deploy Feature Branch to Sandbox'

on:
  workflow_dispatch:
    inputs:
      buildBranch:
        description: "Feature branch to push to test?"
        required: true
        type: "string"
      sandboxWorkspace:
        description: "Which Sandbox to push to."
        required: true
        type: "string"

permissions:
  pull-requests: write
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  react_testing_job:
    runs-on: ubuntu-latest
    environment: development
    defaults:
      run:
        working-directory: ./app

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.buildBranch}}


    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    # - run: npm run build --if-present
    - run: npm test
  
  install-cypress-build:
    runs-on: ubuntu-22.04
    needs: ['react_testing_job']

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cypress install
        uses: cypress-io/github-action@v5
        with:
          # Disable running of tests within install job
          runTests: false
          build: npm run build
          working-directory: ./app

      - name: Save build folder
        uses: actions/upload-artifact@v3
        with:
          name: build
          if-no-files-found: error
          path: ./app/build

  cypress-run-chrome:
    runs-on: ubuntu-22.04
    needs: install-cypress-build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download the build folder
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ./app/build

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          start: npm start
          browser: chrome
          working-directory: ./app

  cypress-run-firefox:
    runs-on: ubuntu-22.04
    needs: install-cypress-build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download the build folder
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ./app/build

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          start: npm start
          browser: firefox
          working-directory: ./app

  cypress-run-edge:
    runs-on: ubuntu-22.04
    needs: install-cypress-build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download the build folder
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ./app/build

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          start: npm start
          browser: edge
          working-directory: ./app
  
  cypress-run-safari:
    runs-on: macos-13
    needs: install-cypress-build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download the build folder
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ./app/build

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          start: npm start
          browser: safari
          working-directory: ./app

  react_build_and_deploy_docker_image:
    runs-on: ubuntu-latest
    environment: development
    needs: ['cypress-run-safari', 'cypress-run-edge', 'cypress-run-firefox', 'cypress-run-chrome']
    defaults:
      run:
        working-directory: ./app

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.buildBranch}}

  
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
        role-skip-session-tagging: true
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ndr-${{ github.event.inputs.sandboxWorkspace}}-app
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  