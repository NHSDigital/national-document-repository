name: 'ZBASE Lambdas: Deploy all required Lambda functions'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      python_version:
        required: true
        type: string
      build_branch:
        description: 'Feature branch to push to test?'
        required: true
        type: 'string'
      sandbox:
        description: 'Which Sandbox to push to?'
        required: true
        type: 'string'
      is_sandbox:
        description: 'Is this deploying to a sandbox?'
        required: false
        default: false
        type: boolean
    secrets:
      AWS_ASSUME_ROLE:
        required: true

permissions:
  pull-requests: write
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  view_action_parameters:
    name: View Deploy all input variables
    runs-on: ubuntu-latest
    steps:
      - name: Display client passed variables
        run: |
          echo Python Version: ${{ inputs.python_version }}
          echo Build Branch: ${{ inputs.build_branch }}
          echo Environment: ${{ inputs.environment }}
          echo Sandbox: ${{ inputs.sandbox }}

  deploy_create_document_reference_lambda:
    name: Deploy create_document_reference_lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: create_document_reference_handler
      lambda_aws_name: CreateDocRefLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_search_patient_details_lambda:
    name: Deploy search_patient_details_lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: search_patient_details_handler
      lambda_aws_name: SearchPatientDetailsLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_document_reference_search_lambda:
    name: Deploy document_reference_search_lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: document_reference_search_handler
      lambda_aws_name: SearchDocumentReferencesLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_delete_document_reference_handler:
    name: Deploy delete_document_reference_handler
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: delete_document_reference_handler
      lambda_aws_name: DeleteDocRefLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_delete_document_object_handler:
    name: Deploy delete_document_object_handler
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: delete_document_object_handler
      lambda_aws_name: DeleteDocumentObjectS3
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_document_manifest_job_lambda:
    name: Deploy document_manifest_job_lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: document_manifest_job_handler
      lambda_aws_name: DocumentManifestJobLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_bulk_upload_metadata_lambda:
    name: Deploy bulk_upload_metadata_lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: bulk_upload_metadata_handler
      lambda_aws_name: BulkUploadMetadataLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_token_request_lambda:
    name: Deploy TokenRequestHandler
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: token_handler
      lambda_aws_name: TokenRequestHandler
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_login_redirect_lambda:
    name: Deploy LoginRedirectHandler
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: login_redirect_handler
      lambda_aws_name: LoginRedirectHandler
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_authoriser_lambda:
    name: Deploy AuthoriserLambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: authoriser_handler
      lambda_aws_name: AuthoriserLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_lloyd_george_record_stitch_lambda:
    name: Deploy LloydGeorgeStitchLambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: lloyd_george_record_stitch_handler
      lambda_aws_name: LloydGeorgeStitchLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_generate_lloyd_george_stitch_lambda:
    name: Deploy GenerateLloydGeorgeStitch
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: generate_lloyd_george_stitch_handler
      lambda_aws_name: GenerateLloydGeorgeStitch
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}


  deploy_logout_handler_lambda:
    name: Deploy LogoutHandler
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: logout_handler
      lambda_aws_name: LogoutHandler
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_bulk_upload_lambda:
    name: Deploy bulk_upload_lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: bulk_upload_handler
      lambda_aws_name: BulkUploadLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_report_bulk_upload_lambda:
    name: Deploy report_bulk_upload_lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: bulk_upload_report_handler
      lambda_aws_name: BulkUploadReportLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_back_channel_logout_lambda:
    name: Deploy back_channel_logout_lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: back_channel_logout_handler
      lambda_aws_name: BackChannelLogoutHandler
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_send_feedback_lambda:
    name: Deploy send_feedback_lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: send_feedback_handler
      lambda_aws_name: SendFeedbackLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_nems_message_lambda:
    name: Deploy nems_message_lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: nems_message_handler
      lambda_aws_name: NemsMessageLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_feature_flags_lambda:
    name: Deploy feature flags lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: feature_flags_handler
      lambda_aws_name: FeatureFlagsLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_virus_scan_result_lambda:
    name: Deploy virus scan result lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: virus_scan_result_handler
      lambda_aws_name: VirusScanResult
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_upload_confirm_result_lambda:
    name: Deploy upload confirm result lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: upload_confirm_result_handler
      lambda_aws_name: UploadConfirmResultLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_update_upload_state_lambda:
    name: Deploy update upload state lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: update_upload_state_handler
      lambda_aws_name: UpdateUploadStateLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_data_collection_lambda:
    name: Deploy data collection lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: data_collection_handler
      lambda_aws_name: DataCollectionLambda
      lambda_layer_names: 'core_lambda_layer,data_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_statistical_report_lambda:
    name: Deploy statistical report lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: statistical_report_handler
      lambda_aws_name: StatisticalReportLambda
      lambda_layer_names: 'core_lambda_layer,data_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_generate_document_manifest_lambda:
    name: Deploy generate document manifest lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: generate_document_manifest_handler
      lambda_aws_name: GenerateDocumentManifest
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_nrl_pointer_lambda:
    name: Deploy manage nrl pointer lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: manage_nrl_pointer_handler
      lambda_aws_name: ManageNrlPointerLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_edge_presign_lambda:
    name: Deploy edge presign cloudfront lambda
    uses: ./.github/workflows/base-lambdas-edge-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: edge_presign_handler
      lambda_aws_name: EdgePresignLambda
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_mns_notification_lambda:
    if: ${{ ! inputs.is_sandbox }}
    name: Deploy mns notification lambda
    uses: ./.github/workflows/base-lambdas-reusable-deploy.yml
    with:
      environment: ${{ inputs.environment}}
      python_version: ${{ inputs.python_version }}
      build_branch: ${{ inputs.build_branch}}
      sandbox: ${{ inputs.sandbox }}
      lambda_handler_name: mns_notification_handler
      lambda_aws_name: MNSNotificationLambda
      lambda_layer_names: 'core_lambda_layer'
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

